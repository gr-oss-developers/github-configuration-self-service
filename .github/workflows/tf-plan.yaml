name: Terraform Plan

on:
  workflow_call:
    inputs:
      commit_sha:
        type: string
        description: 'The commit SHA to promote'
        required: true
      gcss_ref:
        type: string
        description: "GCSS ref to checkout"
        required: false
        default: "main"
    secrets:
      app_private_key:
        required: true
      gh_token:
        required: true
      tfc_token:
        required: true

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    environment: promote
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Generate a token
        uses: actions/create-github-app-token@v2
        id: generate-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.app_private_key }}
          owner: ${{ github.repository.owner.login }}

      - name: Checkout GCSS
        uses: actions/checkout@v4
        with:
          repository: gr-oss-developers/github-configuration-self-service
          ref: ${{ inputs.gcss_ref }}
          persist-credentials: false

      - name: Checkout configuration repo
        uses: actions/checkout@v4
        with:
          path: feature/github-repo-provisioning/gcss_config
          ref: ${{ inputs.commit_sha }}
          token: ${{ secrets.gh_token }}
#          repository: gr-oss-developers/gr-oss-developers-gcss-config

      - name: Copy importer config
        run: |
          cp feature/github-repo-provisioning/gcss_config/config/app-list.yaml feature/github-repo-importer/app-list.yaml
          cp feature/github-repo-provisioning/gcss_config/config/app-list.yaml feature/github-repo-provisioning/app-list.yaml
          cp feature/github-repo-provisioning/gcss_config/config/import-config.yaml feature/github-repo-importer/import-config.yaml

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.tfc_token }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Run Terraform init
        working-directory: feature/github-repo-provisioning
        id: init
        run: terraform init -input=false
        env:
          TF_CLOUD_ORGANIZATION: "GR-OSS"
          TF_WORKSPACE: ${{ vars.WORKSPACE }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Run Terraform plan
        id: plan
        working-directory: feature/github-repo-provisioning
        env:
          TF_CLOUD_ORGANIZATION: "GR-OSS"
          TF_WORKSPACE: ${{ vars.WORKSPACE }}
        run: terraform plan -no-color -input=false

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.gh_token }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })