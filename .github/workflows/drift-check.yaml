name: "Terraform Cloud Drift Check"

on:
  workflow_call:
    inputs:
#      repo_name:
#        type: string
#        description: 'The name of the repository to import'
#        required: true
#      owner:
#        type: string
#        description: 'The owner of the repository to import'
#        required: true
      gcss_ref:
        type: string
        description: "GCSS ref to checkout"
        required: false
        default: "main"
#    secrets:
#      app_private_key:
#        required: true
#      gh_token:
#        required: true

jobs:
  drift-check:
    name: "Drift Check"
    runs-on: ubuntu-latest
    environment: schedule
    steps:
      - name: Checkout GCSS
        uses: actions/checkout@v4
        with:
          repository: gr-oss-developers/github-configuration-self-service
          ref: ${{ inputs.gcss_ref }}
          persist-credentials: false

      - name: Checkout configuration repo
        uses: actions/checkout@v4
        with:
          path: feature/github-repo-provisioning/gcss_config
          ref: ${{ github.sha }}

      - name: Copy GH app mapping
        run: cp feature/github-repo-importer/app-list.yaml feature/github-repo-provisioning/terraform/app-list.yaml

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

      - name: Test exit code
        working-directory: feature/github-repo-provisioning/terraform
        run: |
          ls -la
          touch repo1.yaml
          echo "description: This is a test" > repo1.yaml

      - name: Run Terraform init
        working-directory: feature/github-repo-provisioning/terraform
        run: terraform init -input=false
        env:
          TF_CLOUD_ORGANIZATION: "GR-OSS"
          TF_WORKSPACE: ${{ vars.WORKSPACE }}

      - name: Run Terraform plan
        id: plan
        working-directory: feature/github-repo-provisioning/terraform
        env:
          TF_CLOUD_ORGANIZATION: "GR-OSS"
          TF_WORKSPACE: ${{ vars.WORKSPACE }}
        run: terraform plan -no-color -input=false

      - run: echo ${{ steps.plan.outputs.exitcode }}

#      - name: Run Terraform Cloud drift check
#        id: drift
#        uses: ./.github/actions/drift-detector
#        with:
#          tfc-token: ${{ secrets.TFC_TOKEN }}
#          workspace-id: ${{ vars.WORKSPACE_ID }}
#          polling-interval: 30
#
#      - name: Inspect drift
#        run: |
#          if [[ "${{ steps.drift.outputs.drift }}" == "true" ]]; then
#            echo "Drift detected!"
#            exit 1
#          else
#            echo "No drift detected."
#          fi