name: Create Fork

on:
  workflow_call:
    inputs:
      upstream_repo:
        type: string
        description: "The upstream repository to fork (format: owner/repo)"
        required: true
      fork_name:
        type: string
        description: "The name for the fork (defaults to the upstream repo name)"
        required: false
      default_branch_only:
        type: string
        description: "Whether to fork only the default branch (true/false)"
        required: false
        default: "true"
    secrets:
      app_private_key:
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  create-fork:
    runs-on: ubuntu-latest
    environment: create-fork
    steps:
      - name: Generate GitHub App Token
        uses: actions/create-github-app-token@v2
        id: generate-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.app_private_key }}
          owner: ${{ github.repository_owner }}

      - name: Parse and validate input
        id: parse-upstream
        uses: actions/github-script@v7
        env:
          UPSTREAM_REPO: ${{ inputs.upstream_repo }}
          FORK_NAME: ${{ inputs.fork_name }}
        with:
          script: |
            const upstreamRepo = process.env.UPSTREAM_REPO;
            const forkNameInput = process.env.FORK_NAME;

            if (!/^[-\w]+\/[-\w.]+$/.test(upstreamRepo)) {
              throw new Error(`Invalid upstream_repo format: ${upstreamRepo}`);
            }

            const [, upstreamName] = upstreamRepo.split('/');
            const forkName = forkNameInput || upstreamName;

            if (!/^[-\w.]+$/.test(forkName)) {
              throw new Error(`Invalid fork name: ${forkName}`);
            }

            core.setOutput('fork_name', forkName);

      - name: Create fork using GitHub CLI
        run: |
          gh repo fork ${{ inputs.upstream_repo }} \
          --default-branch-only=${{ inputs.default_branch_only }} \
          --fork-name=${{ steps.parse-upstream.outputs.fork_name }} \
          --org=${{ github.repository_owner }} \
          --clone=false
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Trigger import workflow
        run: |
          gh workflow run import.yaml \
            --repo "${{ github.repository }}" \
            --field repo_name="${{ steps.parse-upstream.outputs.fork_name }}" \
            --ref "${{ github.ref_name }}"
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
